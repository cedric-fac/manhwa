import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache images from Cloudinary
registerRoute(
    ({ url }) => url.origin === 'https://res.cloudinary.com',
    new CacheFirst({
        cacheName: 'cloudinary-images',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 100,
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
            }),
        ],
    })
);

// Cache API routes with Network First strategy
registerRoute(
    ({ request }) => request.url.includes('/api/'),
    new NetworkFirst({
        cacheName: 'api-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 50,
                maxAgeSeconds: 24 * 60 * 60, // 24 hours
            }),
        ],
    })
);

// Cache other static assets
registerRoute(
    ({ request }) => 
        request.destination === 'style' ||
        request.destination === 'script' ||
        request.destination === 'font',
    new StaleWhileRevalidate({
        cacheName: 'static-resources',
    })
);

// Handle offline fallback
const FALLBACK_HTML = '/offline.html';

self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open('offline-fallbacks').then((cache) => {
            return cache.add(FALLBACK_HTML);
        })
    );
});

self.addEventListener('fetch', (event) => {
    if (event.request.mode === 'navigate') {
        event.respondWith(
            fetch(event.request).catch(() => {
                return caches.match(FALLBACK_HTML);
            })
        );
    }
});

// Listen for sync events
self.addEventListener('sync', (event) => {
    if (event.tag === 'sync-readings') {
        event.waitUntil(syncReadings());
    }
});

async function syncReadings() {
    try {
        const response = await fetch('/api/readings/sync', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error('Sync failed');
        }

        // Notify all clients about successful sync
        const clients = await self.clients.matchAll();
        clients.forEach(client => {
            client.postMessage({
                type: 'SYNC_COMPLETE',
                success: true
            });
        });
    } catch (error) {
        console.error('Sync failed:', error);
        // Notify clients about sync failure
        const clients = await self.clients.matchAll();
        clients.forEach(client => {
            client.postMessage({
                type: 'SYNC_COMPLETE',
                success: false,
                error: error.message
            });
        });
    }
}